[{"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/index.js":"1","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/app.js":"2","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_json_for_open.js":"3","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/config.js":"4","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/Interface_definition.js":"5","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_json_for_fold.js":"6","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/encrypt_and_decrypt.js":"7","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_base.js":"8","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/util.js":"9","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/index.js":"10","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/app.js":"11","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/util/encrypt_and_decrypt.js":"12","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/libs/format_json_for_open.js":"13","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/util/config.js":"14","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/libs/Interface_definition.js":"15","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/libs/format_json_for_fold.js":"16","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/util/util.js":"17","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/libs/format_base.js":"18","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/components/NavBar/index.js":"19"},{"size":358,"mtime":1607668001000,"results":"20","hashOfConfig":"21"},{"size":9952,"mtime":1641536396182,"results":"22","hashOfConfig":"21"},{"size":3550,"mtime":1641526111325,"results":"23","hashOfConfig":"21"},{"size":557,"mtime":1608038962000,"results":"24","hashOfConfig":"21"},{"size":6692,"mtime":1641539633419,"results":"25","hashOfConfig":"21"},{"size":6863,"mtime":1641526060659,"results":"26","hashOfConfig":"21"},{"size":1427,"mtime":1607844552000,"results":"27","hashOfConfig":"21"},{"size":2422,"mtime":1641523689270,"results":"28","hashOfConfig":"21"},{"size":257,"mtime":1607844552000,"results":"29","hashOfConfig":"21"},{"size":358,"mtime":1607668001000,"results":"30","hashOfConfig":"31"},{"size":10017,"mtime":1649906090055,"results":"32","hashOfConfig":"31"},{"size":1427,"mtime":1607844552000,"results":"33","hashOfConfig":"31"},{"size":3550,"mtime":1641526111325,"results":"34","hashOfConfig":"31"},{"size":557,"mtime":1608038962000,"results":"35","hashOfConfig":"31"},{"size":6692,"mtime":1641539633419,"results":"36","hashOfConfig":"31"},{"size":6863,"mtime":1641526060659,"results":"37","hashOfConfig":"31"},{"size":257,"mtime":1607844552000,"results":"38","hashOfConfig":"31"},{"size":2422,"mtime":1641523689270,"results":"39","hashOfConfig":"31"},{"size":1310,"mtime":1649906197434,"results":"40","hashOfConfig":"31"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v2gjg",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"qip2w2",{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/index.js",[],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/app.js",["83","84","85"],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_json_for_open.js",["86"],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/config.js",[],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/Interface_definition.js",["87"],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_json_for_fold.js",["88"],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/encrypt_and_decrypt.js",[],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_base.js",[],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/util.js",[],"/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/index.js",[],["89","90"],"/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/app.js",["91","92","93"],"/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/util/encrypt_and_decrypt.js",[],"/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/libs/format_json_for_open.js",["94"],"import Config from \"../util/config\";\nimport {\n  _getRenderKey,\n  _getRenderLeftBrackets,\n  _getRenderLeftSquareBrackets,\n  _getRenderRighSquareBrackets,\n  _getRenderRightBrackets,\n  _getRenderValue,\n  _isArray,\n  _isBaseTypeArr,\n  _isObject,\n  _isObjectArr,\n} from \"./format_base\";\n\nconst indent_str = Config.INDENT_STR;\nconst normalTypes = Config.NORMAL_TYPES;\n\n/**\n * 格式化数组\n * @param arr 数组\n * @param currentStr 已经拼接的字符串\n * @param indent 缩进\n * @param key 对象key\n * @returns {string|*|string}\n * @private\n */\nconst _formatArr = (arr, currentStr, indent, key) => {\n  if (!arr.length) {\n    return (currentStr +=\n      _getRenderLeftSquareBrackets() + _getRenderRighSquareBrackets());\n  }\n  currentStr += `${_getRenderLeftSquareBrackets()}`;\n  // 判断数组是否为基本类型数组\n  if (_isBaseTypeArr(arr)) {\n    for (let i = 0; i < arr.length; i++) {\n      currentStr +=\n        `<br/>${indent + indent_str}` +\n        _getRenderValue(arr[i]) +\n        `${i !== arr.length - 1 ? \",\" : \"\"}`;\n    }\n  } else if (_isObjectArr(arr)) {\n    // 判断是否都为对象的数组\n    for (let i = 0; i < arr.length; i++) {\n      currentStr += `${i === 0 ? \"\" : \",\"}<br/>${indent_str}${indent}`;\n      currentStr = _format(arr[i], currentStr, indent + indent_str);\n    }\n  } else {\n    // 大杂烩\n    for (let i = 0; i < arr.length; i++) {\n      currentStr += `<br/>${indent + indent_str}`;\n      if (normalTypes.includes(typeof arr[i])) {\n        currentStr += _getRenderValue(arr[i]);\n      } else if (_isArray(arr[i])) {\n        // 还是个数组\n        currentStr = _formatArr(arr[i], currentStr, indent + indent_str, \"\");\n      } else {\n        currentStr = _format(arr[i], currentStr, indent + indent_str);\n      }\n      currentStr += `${i !== arr.length - 1 ? \",\" : \"\"}`;\n    }\n  }\n  currentStr += `<br/>${indent}${_getRenderRighSquareBrackets()}`;\n  return currentStr;\n};\n/**\n * 格式化对象\n * @param jsonObj js对象\n * @param currentStr 当前已经拼接的字符串\n * @param indent 缩进\n * @returns {string|*|string}\n * @private\n */\nconst _format = (jsonObj, currentStr, indent) => {\n  let keys = [];\n  try {\n    keys = Reflect.ownKeys(jsonObj);\n  } catch (e) {\n    // jsonObj === null\n    return (currentStr += _getRenderValue(jsonObj));\n  }\n  if (!keys.length) {\n    return (currentStr += _getRenderLeftBrackets() + _getRenderRightBrackets());\n  }\n  currentStr += `${_getRenderLeftBrackets()}`;\n  for (let i = 0; i < keys.length; i++) {\n    // 普通类型\n    currentStr += `${\n      i === 0 ? \"\" : \",\"\n    }<br/>${indent_str}${indent}${_getRenderKey(keys[i])}: `;\n    if (normalTypes.includes(typeof jsonObj[keys[i]])) {\n      currentStr += `${_getRenderValue(jsonObj[keys[i]])}`;\n    } else if (_isArray(jsonObj[keys[i]])) {\n      // 数组\n      currentStr = _formatArr(\n        jsonObj[keys[i]],\n        currentStr,\n        indent + indent_str,\n        keys[i]\n      );\n    } else {\n      currentStr = _format(jsonObj[keys[i]], currentStr, indent + indent_str);\n    }\n  }\n  currentStr += `<br/>${indent}${_getRenderRightBrackets()}`;\n  return currentStr;\n};\n/**\n * 格式化json字符串\n * @param jsonStr json字符串\n * @returns {*}\n */\nconst formatJSON = (jsonStr) => {\n  let result = \"\";\n  try {\n    const  json = eval(`(${jsonStr})`);\n    if (_isObject(json)) {\n      result = _format(json, result, \"\");\n    } else {\n      result = _formatArr(json, result, \"\");\n    }\n  } catch (e) {\n    console.log(e);\n    result = e.message;\n  }\n  return result;\n};\nexport default formatJSON;\n","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/util/config.js",[],"/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/libs/Interface_definition.js",["95"],"import Config from '../util/config';\n// 接口名称\nconst interfaceName = 'Result'\n// 直接拼接基本类型\nconst normalTypes = ['string', 'number', 'boolean', 'undefined'];\n// 处理数组\nlet objs = [];\nlet interfaceNames = [];\nlet globalExportMode = Config.NOT_EXPORT;\nlet globalInterfaceNamePrefix = '';\n\n// 生成的代码缩进 一个tab\nconst indent = '&nbsp;&nbsp;';\n\nfunction _isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nfunction _isArray(obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]'\n}\n\n/**\n * 获取接口名称\n * @param name 返回字段key\n * @returns {string} 返回处理过的名称\n */\nfunction _getOnlyInterfaceName(name) {\n  if (!interfaceNames.includes(name)) {\n    return name;\n  }\n  // 取最后一位\n  let lastCharacter = name.slice(-1)\n  if (lastCharacter >= '0' && lastCharacter <= '9') {\n    lastCharacter = parseInt(lastCharacter) + 1;\n    return _getOnlyInterfaceName(name.substring(0, name.length - 1) + lastCharacter)\n  } else {\n    return _getOnlyInterfaceName(name + '1');\n  }\n}\n\nfunction _getBaseName(key) {\n  const firstName = key.substring(0, 1);\n  const lastName = key.substring(1);\n  return firstName.toUpperCase() + lastName;\n}\n\nfunction _getInterfaceName(key) {\n  const arr = key.split('_');\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = _getBaseName(arr[i]);\n  }\n  let fullName = arr.join('');\n  fullName = globalInterfaceNamePrefix + _getBaseName(fullName)\n  fullName = _getOnlyInterfaceName(fullName)\n  interfaceNames.push(fullName)\n  return fullName;\n}\n\n/**\n * 如果是导出为默认，只能导出最外一级\n * @param name\n * @returns {string}\n * @private\n */\nfunction _getRenderInterface(name) {\n  if ((globalExportMode === Config.EXPORT_DEFAULT && name === 'I' + interfaceName) || name === 'I' + interfaceName) { // export default 只能导出第一级\n    return `<span class=\"keyword\">${globalExportMode === Config.EXPORT ? 'export' : globalExportMode === Config.EXPORT_DEFAULT ? 'export default ' : ''} interface</span>`;\n  }\n  return `<span class=\"keyword\">${globalExportMode === Config.EXPORT ? 'export ' : ''}interface</span>`;\n}\n\nfunction __getRenderInterfaceName(name) {\n  if (name === 'I' + interfaceName) {\n    return `<span class=\"main-interface-name\">${name}</span>`;\n  } else {\n    return `<span>${name}</span>`;\n  }\n}\n\nfunction _getRenderLeft() {\n  return `<span class=\"brackets\">{</span><br/>`;\n}\n\nfunction _getRenderRight() {\n  return `<span class=\"brackets\">}</span><br/>`\n}\n\nfunction _getRenderKey(key) {\n  return `<span  class=\"key\">${key}</span>`;\n}\n\nfunction _getRenderValue(value) {\n  return ` <span class=\"keyword\">${value}</span>;<br/>`;\n}\n\n/**\n * 判断数组是否为普通类型数组\n * @param arr\n * @returns {string}\n */\nfunction _isBaseType(arr) {\n  // 判断数组是否\n  let type = typeof arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (type !== typeof arr[i]) {\n      return 'any';\n    }\n  }\n  return type;\n}\n\n/**\n * 处理数组\n * @param json 包含当前数组的json对象\n * @param key 数组对应的key\n * @param inters 拼接字符串\n * @param indent 缩进\n * @returns {*}\n */\nfunction _handleArray(json, key, inters, indent) {\n  if (json[key].length === 0) {\n    inters += `${indent}${_getRenderKey(key)}:${_getRenderValue('any[]')}`;\n  } else {\n    // 如果是个空数组或者数组里面为非对象\n    if (_isArray(json[key][0])) {\n      // 判断数组是否都为boolean number string等基本类型\n      inters += `${indent}${_getRenderKey(key)}:${_getRenderValue('any[]')}`;\n    } else {\n      // 有可能是对象也有可能是普通类型，如果是对象，类型按照第一个元素类型定义，如果都为普通类型，则指定为具体类型数组\n      // 否则为any数组\n      // 判断是否为 [1,2,3]形式处理\n      if (normalTypes.includes(typeof json[key][0])) {\n        const type = _isBaseType(json[key])\n        inters += `${indent}${_getRenderKey(key)}: ${_getRenderValue(type + '[]')}`;\n      } else {\n        const interfaceName = _getInterfaceName(key)\n        inters += `${indent}${_getRenderKey(key)}: ${_getRenderValue(interfaceName + '[]')}`;\n        objs.push({\n          key: interfaceName,\n          value: json[key][0]\n        });\n      }\n    }\n  }\n  return inters;\n}\n\n/**\n * 处理json\n * @param json 待处理json\n * @param name 接口名字\n * @param inters 拼接的字符串\n * @param first 是否为第一级\n * @param ind 缩进方式 默认一个tab\n * @returns {*}\n */\nfunction _parseJson(json, name, inters, first = true, ind = indent) {\n  let keys = [];\n  try {\n    keys = Reflect.ownKeys(json);\n  } catch (e) {\n    console.log(e);\n  }\n  if (!keys.length) { // 判断是否有key\n    inters += `${_getRenderInterface(name)} ${__getRenderInterfaceName(name)} ${_getRenderLeft()}`\n    inters += _getRenderRight();\n    return inters;\n  }\n  if (!inters && first) {\n    inters += `${_getRenderInterface(name)} ${__getRenderInterfaceName(name)} ${_getRenderLeft()}`\n  } else if (!inters && !first) {\n    inters += _getRenderLeft();\n  }\n  let type;\n  for (const key of keys) {\n    // 判断值类型\n    type = typeof json[key];\n    if (normalTypes.includes(type) || json[key] === null) {\n      inters += `${ind}${_getRenderKey(key)}:${_getRenderValue(json[key] === null ? 'null' : type)}`;\n    } else if (_isArray(json[key])) {\n      inters = _handleArray(json, key, inters, ind);\n    } else if (_isObject(json[key])) {\n      // inters += `${ind}${_getRenderKey(key)}: ${_parseJson(json[key], key, '', false, ind + ind)}`;\n      const interfaceName = _getInterfaceName(key)\n      inters += `${indent}${_getRenderKey(key)}: ${interfaceName};<br/>`;\n      objs.push({\n        key: interfaceName,\n        value: json[key]\n      });\n    }\n  }\n  if (first) {\n    inters += _getRenderRight();\n  } else {\n    inters += indent + _getRenderRight();\n  }\n  return inters;\n}\n\n/**\n * 导出接口定义\n * @param res json字符串\n * @param exportMode 1 不导出 2 导出 3 导出为默认\n * @returns {*}\n */\nexport default function interfaceDefinition(res, exportMode = Config.NOT_EXPORT, interfaceNamePrefix = '') {\n  globalExportMode = exportMode;\n  globalInterfaceNamePrefix = interfaceNamePrefix;\n  let result;\n  objs = [];\n  interfaceNames = [];\n  try {\n    const  json = eval(`(${res})`);\n    if (_isObject(json)) {\n      result = _parseJson(json, _getInterfaceName(interfaceName), '', true);\n      for (const obj of objs) {\n        result += '<br/>'\n        result += _parseJson(obj.value, obj.key, '', true);\n      }\n    } else {\n      result = '当前仅支持对象类型';\n    }\n  } catch (e) {\n    result = e.message;\n  }\n  return result;\n}\n\n","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/libs/format_json_for_fold.js",["96"],"import uuid from \"../util/util\";\nimport EncryptAndDecrypt from \"../util/encrypt_and_decrypt\";\nimport Config from '../util/config';\nimport {\n  _getRenderKey,\n  _getRenderLeftBrackets,\n  _getRenderLeftSquareBrackets,\n  _getRenderRighSquareBrackets,\n  _getRenderRightBrackets,\n  _getRenderValue, _isArray,\n  _isBaseTypeArr, _isObject,\n  _isObjectArr\n} from './format_base';\n\nconst indent_str = Config.INDENT_STR;\nconst normalTypes = Config.NORMAL_TYPES;\n\n/**\n * 格式化数组\n * @param arr 数组\n * @param currentStr 已经拼接的字符串\n * @param indent 缩进\n * @returns {string|*}\n * @private\n */\nconst _formatArr = (arr, currentStr, indent) => {\n  if (!arr.length) {\n    return currentStr += _getRenderLeftSquareBrackets() + _getRenderRighSquareBrackets();\n  }\n  currentStr += `${_getRenderLeftSquareBrackets()}`;\n  // 判断数组是否为基本类型数组\n  if (_isBaseTypeArr(arr)) {\n    for (let i = 0; i < arr.length; i++) {\n      currentStr += `<br/>${indent + indent_str}` + _getRenderValue(arr[i]) + `${i !== arr.length - 1 ? ',' : ''}`;\n    }\n  } else if (_isObjectArr(arr)) {// 判断是否都为对象的数组\n    // debugger\n    for (let i = 0; i < arr.length; i++) {\n      const target = _getData(arr[i], indent);\n      currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}<span class=\"object iconfont\" data-fold=\"${Config.FOLD_STATUS}\" data-id=\"${target.id}\" data-indent=\"${target.encryptIndent}\"></span><span id=\"${target.id}\">${_getRenderLeftBrackets()}...${_getRenderRightBrackets()}</span>`;\n    }\n  } else {\n    // 大杂烩\n    for (let i = 0; i < arr.length; i++) {\n      currentStr += `<br/>${indent + indent_str}`;\n      if (normalTypes.includes(typeof arr[i])) {\n\n        currentStr += _getRenderValue(arr[i]);\n\n      } else if (_isArray(arr[i])) { // 还是个数组\n        if (arr[i].length === 0) { // 空数组\n          currentStr += _getRenderLeftSquareBrackets() + _getRenderRighSquareBrackets();\n        } else {\n          const target = _getData(arr[i], indent);\n          currentStr += `<span class=\"array iconfont\" data-fold=\"${Config.FOLD_STATUS}\" data-id=\"${target.id}\"></span><span id=\"${target.id}\">${_getRenderLeftSquareBrackets()}...${_getRenderRighSquareBrackets()}</span>`;\n        }\n      } else {\n        const target = _getData(arr[i], indent);\n        currentStr += `<span class=\"object iconfont\" data-fold=\"${Config.FOLD_STATUS}\" data-id=\"${target.id}\"></span><span id=\"${target.id}\">${_getRenderLeftBrackets()}...${_getRenderRightBrackets()}</span>`;\n      }\n      currentStr += `${i !== arr.length - 1 ? ',' : ''}`\n    }\n  }\n  currentStr += `<br/>${indent}${_getRenderRighSquareBrackets()}`;\n  return currentStr;\n}\n/**\n * 获取数据\n * @param oldData 原始value\n * @param currentIndent 当前缩进\n * @returns {{encryptIndent, id: string, value: any}}\n * @private\n */\nconst _getData = (oldData, currentIndent) => {\n  const id = uuid();\n  let value = JSON.stringify(oldData);\n  value = EncryptAndDecrypt.encryptByDESModeEBC(value)\n  sessionStorage.setItem(id, value);\n\n  const indentKey = EncryptAndDecrypt.encryptByDESModeEBC(id + 'indent');\n  const encryptIndent = EncryptAndDecrypt.encryptByDESModeEBC(indent_str + currentIndent);\n  sessionStorage.setItem(indentKey, encryptIndent);\n  return {\n    id\n  }\n}\n/**\n * 格式化json\n * @param jsonObj js对象\n * @param currentStr 已经拼接好的字符串\n * @param indent  当前缩进\n * @returns {string}\n * @private\n */\nconst _format = (jsonObj, currentStr, indent) => {\n  let keys = [];\n  try {\n    keys = Reflect.ownKeys(jsonObj);\n  } catch (e) {\n    // jsonObj === null\n    return currentStr += jsonObj;\n  }\n  if (!keys.length) {\n    return currentStr += _getRenderLeftBrackets() + _getRenderRightBrackets();\n  }\n  currentStr += `${_getRenderLeftBrackets()}`;\n  for (let i = 0; i < keys.length; i++) {\n    // 普通类型\n    if (normalTypes.includes(typeof jsonObj[keys[i]])) {\n      currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}${_getRenderKey(keys[i])}: `;\n      currentStr += `${_getRenderValue(jsonObj[keys[i]])}`\n    } else if (_isArray(jsonObj[keys[i]])) { // 数组\n      if (jsonObj[keys[i]].length === 0) { // 空数组\n        currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}${_getRenderKey(keys[i])}: `;\n        currentStr += _getRenderLeftSquareBrackets() + _getRenderRighSquareBrackets();\n      } else {\n        currentStr = _getObjStr(keys[i], jsonObj[keys[i]], currentStr, indent, 'array', i);\n      }\n    } else {\n      currentStr = _getObjStr(keys[i], jsonObj[keys[i]], currentStr, indent, 'object', i);\n    }\n  }\n  currentStr += `<br/>${indent}${_getRenderRightBrackets()}`;\n  return currentStr;\n}\n/**\n * 对象中处理对象和数组\n * @param key 当前的key\n * @param value 对应的value\n * @param currentStr 当前拼接的字符串\n * @param indent 缩进\n * @param type object | array\n * @param i 索引\n * @returns {string} 结果字符串\n * @private\n */\nconst _getObjStr = (key, value, currentStr, indent, type, i) => {\n\n  const target = _getData(value, indent);\n  // 值为null时直接显示\n  if (value === null) {\n    currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}${_getRenderKey(key)}: `;\n    currentStr += _getRenderValue(value);\n  } else { // 判断是数组还是对象\n    currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}<span class=\"${type} iconfont\" data-fold=\"${Config.FOLD_STATUS}\" data-id=\"${target.id}\"></span>${_getRenderKey(key)}: `;\n    if (type === 'object') {\n      currentStr += `<span id=\"${target.id}\">${_getRenderLeftBrackets()}...${_getRenderRightBrackets()}</span>`;\n    } else {\n      currentStr += `<span id=\"${target.id}\">${_getRenderLeftSquareBrackets()}...${_getRenderRighSquareBrackets()}</span>`;\n    }\n  }\n  return currentStr;\n}\n/**\n * 格式化json\n * @param jsonStr\n * @param fold\n * @param indent\n * @param isObj\n * @returns {string|*}\n */\nconst formatJSON = (jsonStr, fold = Config.FOLD_STATUS, indent = '', isObj = true) => {\n  let result = '';\n  try {\n    if (indent) { // 有缩进 当前fold传入0 ，则需要展开\n      const value = EncryptAndDecrypt.decryptByDESModeEBC(jsonStr);\n      if (fold === Config.OPEN_STATUS) {\n        return isObj ? `${_getRenderLeftBrackets()}...${_getRenderRightBrackets()}` : `${_getRenderLeftSquareBrackets()}...${_getRenderRighSquareBrackets()}`;\n      }\n      const obj = JSON.parse(value);\n      return isObj ? _format(obj, '', EncryptAndDecrypt.decryptByDESModeEBC(indent)) : _formatArr(obj, '', EncryptAndDecrypt.decryptByDESModeEBC(indent));\n    }\n    // 第一级\n    const json =  eval(`(${jsonStr})`);\n    if (_isObject(json)) {\n      result = _format(json, result, '');\n    } else {\n      result = _formatArr(json, result, '');\n    }\n  } catch (e) {\n    console.log(e);\n    result = e.message;\n  }\n  return result;\n}\nexport default formatJSON;\n","/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/util/util.js",[],"/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/libs/format_base.js",[],"/Users/snail/Desktop/code/other-2021/open_source/hello_json/src/components/NavBar/index.js",["97"],{"ruleId":"98","severity":1,"message":"99","line":288,"column":45,"nodeType":"100","messageId":"101","endLine":288,"endColumn":46,"fix":"102"},{"ruleId":"98","severity":1,"message":"99","line":289,"column":91,"nodeType":"100","messageId":"101","endLine":289,"endColumn":92,"fix":"103"},{"ruleId":"98","severity":1,"message":"99","line":290,"column":93,"nodeType":"100","messageId":"101","endLine":290,"endColumn":94,"fix":"104"},{"ruleId":"105","severity":1,"message":"106","line":115,"column":19,"nodeType":"107","messageId":"108","endLine":115,"endColumn":23},{"ruleId":"105","severity":1,"message":"106","line":214,"column":19,"nodeType":"107","messageId":"108","endLine":214,"endColumn":23},{"ruleId":"105","severity":1,"message":"106","line":174,"column":19,"nodeType":"107","messageId":"108","endLine":174,"endColumn":23},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"98","severity":1,"message":"99","line":287,"column":45,"nodeType":"100","messageId":"101","endLine":287,"endColumn":46,"fix":"113"},{"ruleId":"98","severity":1,"message":"99","line":288,"column":91,"nodeType":"100","messageId":"101","endLine":288,"endColumn":92,"fix":"114"},{"ruleId":"98","severity":1,"message":"99","line":289,"column":93,"nodeType":"100","messageId":"101","endLine":289,"endColumn":94,"fix":"115"},{"ruleId":"105","severity":1,"message":"106","line":115,"column":19,"nodeType":"107","messageId":"108","endLine":115,"endColumn":23},{"ruleId":"105","severity":1,"message":"106","line":214,"column":19,"nodeType":"107","messageId":"108","endLine":214,"endColumn":23},{"ruleId":"105","severity":1,"message":"106","line":174,"column":19,"nodeType":"107","messageId":"108","endLine":174,"endColumn":23},{"ruleId":"116","severity":1,"message":"117","line":25,"column":13,"nodeType":"118","endLine":28,"endColumn":15},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"119","text":"120"},{"range":"121","text":"120"},{"range":"122","text":"120"},"no-eval","eval can be harmful.","CallExpression","unexpected","no-native-reassign",["123"],"no-negated-in-lhs",["124"],{"range":"125","text":"120"},{"range":"126","text":"120"},{"range":"127","text":"120"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",[9231,9295],"\n                                                              .",[9323,9387],[9417,9481],"no-global-assign","no-unsafe-negation",[9186,9250],[9278,9342],[9372,9436]]