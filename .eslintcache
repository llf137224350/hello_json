[{"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/index.js":"1","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/app.js":"2","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_json_for_open.js":"3","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/config.js":"4","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/Interface_definition.js":"5","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_json_for_fold.js":"6","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/encrypt_and_decrypt.js":"7","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_base.js":"8","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/util.js":"9"},{"size":358,"mtime":1607668001000,"results":"10","hashOfConfig":"11"},{"size":9924,"mtime":1641615800107,"results":"12","hashOfConfig":"11"},{"size":3550,"mtime":1641526111325,"results":"13","hashOfConfig":"11"},{"size":545,"mtime":1641615734704,"results":"14","hashOfConfig":"11"},{"size":6692,"mtime":1641539633419,"results":"15","hashOfConfig":"11"},{"size":6863,"mtime":1641526060659,"results":"16","hashOfConfig":"11"},{"size":1427,"mtime":1607844552000,"results":"17","hashOfConfig":"11"},{"size":2422,"mtime":1641523689270,"results":"18","hashOfConfig":"11"},{"size":257,"mtime":1607844552000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4462v7",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/index.js",[],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/app.js",["42","43","44"],"/*\n * @Author: い 狂奔的蜗牛\n * @Date: 2020-12-11 12:12:15\n * @LastEditTime: 2020-12-11 17:48:21\n * @Description:\n */\nimport React, {Component} from 'react';\n\nimport './app.css';\nimport 'antd/dist/antd.css';\nimport interfaceDefinition from \"./libs/Interface_definition\";\nimport formatJSON from './libs/format_json_for_open';\nimport formatJSONForFold from './libs/format_json_for_fold';\nimport {message} from 'antd';\nimport Config from './util/config';\nimport EncryptAndDecrypt from \"./util/encrypt_and_decrypt\";\n\nconst ClipboardJS = require('clipboard');\n\nconst jsonStr = `\n{\n  rewardable: true,\n  setting: {\n    description: \"小礼物走一走，来简书关注我\",\n    default_amount: 200\n  },\n  total_rewards_count: 2,\n  reward_buyers: [\n    {\n      avatar: \"https://upload.jianshu.io/users/upload_avatars/24980734/6a3c4ca0-a49b-4c04-bd0e-873680f9d299\",\n      slug: \"7e41f9591579\"\n    },\n    {\n      avatar: \"https://cdn2.jianshu.io/assets/default_avatar/2-9636b13945b9ccf345bc98d0d81074eb.jpg\",\n      slug: \"2b934bfdf859\"\n    }\n  ]\n}\n`;\n// 是否创建typescript 接口定义输出\nconst createInterfaceDefinition = localStorage.getItem(EncryptAndDecrypt.encryptBase64('createinterface_definition')) !== '0';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isToggle: false,\n      createInterfaceDefinition: createInterfaceDefinition,\n      currentModel: Config.OPEN_MODE, // 1 展开模式 2 折叠模式\n      currentExportModel: Config.NOT_EXPORT, // 导出模式  1 don't export 2 export 3 export default\n      inputJsonStr: jsonStr, // 待处理字符串\n      formatResultForOpen: formatJSON(jsonStr), // 默认解析展开模式\n      formatResultForFold: '', // 折叠模式\n      interfaceDefinitionResult: createInterfaceDefinition ? interfaceDefinition(jsonStr) : '', // 接口定义\n      placeholder: `示例：${jsonStr}`\n    }\n    this.v1Ref = undefined; // 展开模式\n    this.v2Ref = undefined; // 折叠模式\n    this.handleChange = this.handleChange.bind(this)\n    this.modelChange = this.modelChange.bind(this)\n    this.exportModelChange = this.exportModelChange.bind(this)\n    this.toggleCreateInterfaceDefinition = this.toggleCreateInterfaceDefinition.bind(this)\n    this.getClassName = this.getClassName.bind(this)\n  }\n\n  /**\n   * 输入框值变化\n   * @param e\n   */\n  handleChange(e) {\n    const value = e.target.value;\n    // 生成ts 接口定义\n    if (this.state.createInterfaceDefinition) {\n      this.setState({\n        interfaceDefinitionResult: interfaceDefinition(value, this.state.currentExportModel),\n      })\n    }\n    this.setState(() => {\n      return {\n        inputJsonStr: value,\n        formatResultForOpen: '',\n        formatResultForFold: '',\n      };\n    }, () => {\n      this.format(this.state.currentModel, value, Config.INPUT_CHANGED);\n    });\n  }\n\n  /**\n   * 格式化处理\n   * @param currentModel\n   * @param value\n   * @param type 1 模式切换 2 输入框值变化\n   */\n  format(currentModel, value, type) {\n    if (type === Config.MODEL_CHANGED) {\n      if ((currentModel === Config.OPEN_MODE && this.state.formatResultForOpen) ||\n        (currentModel === Config.FOLD_MODE && this.state.formatResultForFold)) { // 来至于模式切换，且是从展开模式切换到折叠模式\n        return;\n      }\n    }\n    if (currentModel === Config.OPEN_MODE) { // 展开模式\n      this.setState({\n        formatResultForOpen: formatJSON(value)\n      });\n    } else {\n      this.setState({\n        formatResultForFold: formatJSONForFold(value)\n      });\n    }\n  }\n\n  /**\n   * 模式切换\n   * @param e\n   */\n  modelChange(e) {\n    const value = e.target.dataset.value * 1;\n    if (value === this.state.currentModel) {\n      return;\n    }\n    this.setState(() => {\n      return value === Config.FOLD_MODE ? {\n        currentModel: value,\n        formatResultForOpen: this.v1Ref.innerHTML\n      } : {\n        currentModel: value,\n        formatResultForFold: this.v2Ref.innerHTML\n      }\n    }, () => {\n      this.format(value, this.state.inputJsonStr, Config.MODEL_CHANGED);\n    });\n  }\n\n  /**\n   * 导出模式切换\n   * @param e\n   */\n  exportModelChange(e) {\n    const value = e.target.dataset.value * 1;\n    this.setState({\n      currentExportModel: value,\n      interfaceDefinitionResult: interfaceDefinition(this.state.inputJsonStr, value),\n    });\n  }\n\n  /**\n   * 复制成功回调\n   * @param e\n   */\n  copySuccessHandle(e) {\n    message.success(`${e.text} 已复制`);\n  }\n\n  /**\n   * 点击展开或者收拢\n   * @param e\n   */\n  clickArrowHandle(e) {\n    const arr = Array.from(e.target.classList);\n    if (arr.includes('object') || arr.includes('array')) { // 点击obj\n      const {fold, id} = e.target.dataset;\n      const value = sessionStorage.getItem(id);\n      const indent = sessionStorage.getItem(EncryptAndDecrypt.encryptByDESModeEBC(id + 'indent'));\n      e.target.dataset.fold = fold * 1 === Config.OPEN_STATUS ? Config.FOLD_STATUS.toString() : Config.OPEN_STATUS.toString();\n      document.getElementById(id).innerHTML = formatJSONForFold(value, fold * 1, indent, arr.includes('object'));\n    }\n  }\n\n  toggleCreateInterfaceDefinition() {\n    this.setState({\n      isToggle: true\n    });\n    if (!this.state.createInterfaceDefinition) {\n      this.setState(() => {\n        return {interfaceDefinitionResult: interfaceDefinition(this.state.inputJsonStr, this.state.currentExportModel)};\n      }, () => {\n        this.setState({\n          createInterfaceDefinition: !this.state.createInterfaceDefinition\n        });\n      })\n      // 接口定义\n    } else {\n      this.setState({\n        createInterfaceDefinition: !this.state.createInterfaceDefinition\n      });\n    }\n    localStorage.setItem(EncryptAndDecrypt.encryptBase64('createinterface_definition'), !this.state.createInterfaceDefinition ? '1' : '0');\n  }\n\n  componentDidMount() {\n    const clipboard = new ClipboardJS('.copy');\n    clipboard.on('success', this.copySuccessHandle);\n\n    const clipboardForButton = new ClipboardJS('.copy-button');\n    clipboardForButton.on('success', ()=>{\n      message.success(`复制成功`);\n    });\n\n    document.addEventListener('click', this.clickArrowHandle);\n  }\n\n  getClassName() {\n    const {isToggle, createInterfaceDefinition} = this.state;\n    if (isToggle) {\n      if (createInterfaceDefinition) {\n        return 'right-container animate__animated animate__slideInRight';\n      } else {\n        return 'hidden right-container animate__animated animate__slideOutRight';\n      }\n    } else {\n      if (createInterfaceDefinition) {\n        return 'right-container';\n      } else {\n        return 'hidden right-container';\n      }\n    }\n  }\n\n  render() {\n    const {\n      placeholder,\n      createInterfaceDefinition,\n      currentModel,\n      formatResultForOpen,\n      formatResultForFold,\n      currentExportModel,\n      interfaceDefinitionResult\n    } = this.state;\n    return <>\n      <div className='app'>\n        <div className='left-container'>\n          <div className=\"title iconfont\">JSON字符串</div>\n          <textarea className='input' placeholder={placeholder}\n                    onChange={(e) => {\n                      this.handleChange(e);\n                    }}/>\n        </div>\n        <div className={createInterfaceDefinition ? 'middle-container' : 'hidden middle-container'}>\n          <div className=\"tab-list\">\n            <div className={currentModel === Config.OPEN_MODE ? 'tab-item current' : 'tab-item'}\n                 data-value={Config.OPEN_MODE}\n                 onClick={this.modelChange}\n            >展开模式\n            </div>\n            <div className={currentModel === Config.FOLD_MODE ? 'tab-item current' : 'tab-item'}\n                 data-value={Config.FOLD_MODE}\n                 onClick={this.modelChange}\n            >折叠模式\n            </div>\n          </div>\n          {\n            this.state.currentModel === Config.OPEN_MODE &&\n            <div className='content' ref={(el) => {\n              this.v1Ref = el;\n            }\n            } dangerouslySetInnerHTML={{__html: formatResultForOpen}}/>\n          }\n          {\n            this.state.currentModel === Config.FOLD_MODE &&\n            <div className='content' ref={(el) => {\n              this.v2Ref = el;\n            }\n            } dangerouslySetInnerHTML={{__html: formatResultForFold}}/>\n          }\n        </div>\n        <div className={this.getClassName()}>\n          <div className=\"tab-list\">\n            <div className={currentExportModel === Config.NOT_EXPORT ? 'tab-item current' : 'tab-item'}\n                 data-value={Config.NOT_EXPORT}\n                 onClick={this.exportModelChange}\n            >don't export\n            </div>\n            <div className={currentExportModel === Config.EXPORT ? 'tab-item current' : 'tab-item'}\n                 data-value={Config.EXPORT}\n                 onClick={this.exportModelChange}\n            >export\n            </div>\n            <div className={currentExportModel === Config.EXPORT_DEFAULT ? 'tab-item current' : 'tab-item'}\n                 data-value={Config.EXPORT_DEFAULT}\n                 onClick={this.exportModelChange}\n            >export default\n            </div>\n          </div>\n          <div className='toggle iconfont' onClick={this.toggleCreateInterfaceDefinition}/>\n          <div className='content' dangerouslySetInnerHTML={{__html: interfaceDefinitionResult}}/>\n          <div className='iconfont copy-button' title=\"点击复制\" data-clipboard-text={(()=>{\n            return interfaceDefinitionResult.\n                                                              replace(/<br\\s?\\/?>/g, '\\n').\n                                                              replace(/&nbsp;&nbsp;/g, '  ').\n                                                              replace(/<\\/?[^>]*>/g,'');\n          })()}></div>\n        </div>\n      </div>\n    </>\n  }\n}\n\nexport default App;\n","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_json_for_open.js",["45"],"import Config from \"../util/config\";\nimport {\n  _getRenderKey,\n  _getRenderLeftBrackets,\n  _getRenderLeftSquareBrackets,\n  _getRenderRighSquareBrackets,\n  _getRenderRightBrackets,\n  _getRenderValue,\n  _isArray,\n  _isBaseTypeArr,\n  _isObject,\n  _isObjectArr,\n} from \"./format_base\";\n\nconst indent_str = Config.INDENT_STR;\nconst normalTypes = Config.NORMAL_TYPES;\n\n/**\n * 格式化数组\n * @param arr 数组\n * @param currentStr 已经拼接的字符串\n * @param indent 缩进\n * @param key 对象key\n * @returns {string|*|string}\n * @private\n */\nconst _formatArr = (arr, currentStr, indent, key) => {\n  if (!arr.length) {\n    return (currentStr +=\n      _getRenderLeftSquareBrackets() + _getRenderRighSquareBrackets());\n  }\n  currentStr += `${_getRenderLeftSquareBrackets()}`;\n  // 判断数组是否为基本类型数组\n  if (_isBaseTypeArr(arr)) {\n    for (let i = 0; i < arr.length; i++) {\n      currentStr +=\n        `<br/>${indent + indent_str}` +\n        _getRenderValue(arr[i]) +\n        `${i !== arr.length - 1 ? \",\" : \"\"}`;\n    }\n  } else if (_isObjectArr(arr)) {\n    // 判断是否都为对象的数组\n    for (let i = 0; i < arr.length; i++) {\n      currentStr += `${i === 0 ? \"\" : \",\"}<br/>${indent_str}${indent}`;\n      currentStr = _format(arr[i], currentStr, indent + indent_str);\n    }\n  } else {\n    // 大杂烩\n    for (let i = 0; i < arr.length; i++) {\n      currentStr += `<br/>${indent + indent_str}`;\n      if (normalTypes.includes(typeof arr[i])) {\n        currentStr += _getRenderValue(arr[i]);\n      } else if (_isArray(arr[i])) {\n        // 还是个数组\n        currentStr = _formatArr(arr[i], currentStr, indent + indent_str, \"\");\n      } else {\n        currentStr = _format(arr[i], currentStr, indent + indent_str);\n      }\n      currentStr += `${i !== arr.length - 1 ? \",\" : \"\"}`;\n    }\n  }\n  currentStr += `<br/>${indent}${_getRenderRighSquareBrackets()}`;\n  return currentStr;\n};\n/**\n * 格式化对象\n * @param jsonObj js对象\n * @param currentStr 当前已经拼接的字符串\n * @param indent 缩进\n * @returns {string|*|string}\n * @private\n */\nconst _format = (jsonObj, currentStr, indent) => {\n  let keys = [];\n  try {\n    keys = Reflect.ownKeys(jsonObj);\n  } catch (e) {\n    // jsonObj === null\n    return (currentStr += _getRenderValue(jsonObj));\n  }\n  if (!keys.length) {\n    return (currentStr += _getRenderLeftBrackets() + _getRenderRightBrackets());\n  }\n  currentStr += `${_getRenderLeftBrackets()}`;\n  for (let i = 0; i < keys.length; i++) {\n    // 普通类型\n    currentStr += `${\n      i === 0 ? \"\" : \",\"\n    }<br/>${indent_str}${indent}${_getRenderKey(keys[i])}: `;\n    if (normalTypes.includes(typeof jsonObj[keys[i]])) {\n      currentStr += `${_getRenderValue(jsonObj[keys[i]])}`;\n    } else if (_isArray(jsonObj[keys[i]])) {\n      // 数组\n      currentStr = _formatArr(\n        jsonObj[keys[i]],\n        currentStr,\n        indent + indent_str,\n        keys[i]\n      );\n    } else {\n      currentStr = _format(jsonObj[keys[i]], currentStr, indent + indent_str);\n    }\n  }\n  currentStr += `<br/>${indent}${_getRenderRightBrackets()}`;\n  return currentStr;\n};\n/**\n * 格式化json字符串\n * @param jsonStr json字符串\n * @returns {*}\n */\nconst formatJSON = (jsonStr) => {\n  let result = \"\";\n  try {\n    const  json = eval(`(${jsonStr})`);\n    if (_isObject(json)) {\n      result = _format(json, result, \"\");\n    } else {\n      result = _formatArr(json, result, \"\");\n    }\n  } catch (e) {\n    console.log(e);\n    result = e.message;\n  }\n  return result;\n};\nexport default formatJSON;\n","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/config.js",[],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/Interface_definition.js",["46"],"import Config from '../util/config';\n// 接口名称\nconst interfaceName = 'Result'\n// 直接拼接基本类型\nconst normalTypes = ['string', 'number', 'boolean', 'undefined'];\n// 处理数组\nlet objs = [];\nlet interfaceNames = [];\nlet globalExportMode = Config.NOT_EXPORT;\nlet globalInterfaceNamePrefix = '';\n\n// 生成的代码缩进 一个tab\nconst indent = '&nbsp;&nbsp;';\n\nfunction _isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nfunction _isArray(obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]'\n}\n\n/**\n * 获取接口名称\n * @param name 返回字段key\n * @returns {string} 返回处理过的名称\n */\nfunction _getOnlyInterfaceName(name) {\n  if (!interfaceNames.includes(name)) {\n    return name;\n  }\n  // 取最后一位\n  let lastCharacter = name.slice(-1)\n  if (lastCharacter >= '0' && lastCharacter <= '9') {\n    lastCharacter = parseInt(lastCharacter) + 1;\n    return _getOnlyInterfaceName(name.substring(0, name.length - 1) + lastCharacter)\n  } else {\n    return _getOnlyInterfaceName(name + '1');\n  }\n}\n\nfunction _getBaseName(key) {\n  const firstName = key.substring(0, 1);\n  const lastName = key.substring(1);\n  return firstName.toUpperCase() + lastName;\n}\n\nfunction _getInterfaceName(key) {\n  const arr = key.split('_');\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = _getBaseName(arr[i]);\n  }\n  let fullName = arr.join('');\n  fullName = globalInterfaceNamePrefix + _getBaseName(fullName)\n  fullName = _getOnlyInterfaceName(fullName)\n  interfaceNames.push(fullName)\n  return fullName;\n}\n\n/**\n * 如果是导出为默认，只能导出最外一级\n * @param name\n * @returns {string}\n * @private\n */\nfunction _getRenderInterface(name) {\n  if ((globalExportMode === Config.EXPORT_DEFAULT && name === 'I' + interfaceName) || name === 'I' + interfaceName) { // export default 只能导出第一级\n    return `<span class=\"keyword\">${globalExportMode === Config.EXPORT ? 'export' : globalExportMode === Config.EXPORT_DEFAULT ? 'export default ' : ''} interface</span>`;\n  }\n  return `<span class=\"keyword\">${globalExportMode === Config.EXPORT ? 'export ' : ''}interface</span>`;\n}\n\nfunction __getRenderInterfaceName(name) {\n  if (name === 'I' + interfaceName) {\n    return `<span class=\"main-interface-name\">${name}</span>`;\n  } else {\n    return `<span>${name}</span>`;\n  }\n}\n\nfunction _getRenderLeft() {\n  return `<span class=\"brackets\">{</span><br/>`;\n}\n\nfunction _getRenderRight() {\n  return `<span class=\"brackets\">}</span><br/>`\n}\n\nfunction _getRenderKey(key) {\n  return `<span  class=\"key\">${key}</span>`;\n}\n\nfunction _getRenderValue(value) {\n  return ` <span class=\"keyword\">${value}</span>;<br/>`;\n}\n\n/**\n * 判断数组是否为普通类型数组\n * @param arr\n * @returns {string}\n */\nfunction _isBaseType(arr) {\n  // 判断数组是否\n  let type = typeof arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (type !== typeof arr[i]) {\n      return 'any';\n    }\n  }\n  return type;\n}\n\n/**\n * 处理数组\n * @param json 包含当前数组的json对象\n * @param key 数组对应的key\n * @param inters 拼接字符串\n * @param indent 缩进\n * @returns {*}\n */\nfunction _handleArray(json, key, inters, indent) {\n  if (json[key].length === 0) {\n    inters += `${indent}${_getRenderKey(key)}:${_getRenderValue('any[]')}`;\n  } else {\n    // 如果是个空数组或者数组里面为非对象\n    if (_isArray(json[key][0])) {\n      // 判断数组是否都为boolean number string等基本类型\n      inters += `${indent}${_getRenderKey(key)}:${_getRenderValue('any[]')}`;\n    } else {\n      // 有可能是对象也有可能是普通类型，如果是对象，类型按照第一个元素类型定义，如果都为普通类型，则指定为具体类型数组\n      // 否则为any数组\n      // 判断是否为 [1,2,3]形式处理\n      if (normalTypes.includes(typeof json[key][0])) {\n        const type = _isBaseType(json[key])\n        inters += `${indent}${_getRenderKey(key)}: ${_getRenderValue(type + '[]')}`;\n      } else {\n        const interfaceName = _getInterfaceName(key)\n        inters += `${indent}${_getRenderKey(key)}: ${_getRenderValue(interfaceName + '[]')}`;\n        objs.push({\n          key: interfaceName,\n          value: json[key][0]\n        });\n      }\n    }\n  }\n  return inters;\n}\n\n/**\n * 处理json\n * @param json 待处理json\n * @param name 接口名字\n * @param inters 拼接的字符串\n * @param first 是否为第一级\n * @param ind 缩进方式 默认一个tab\n * @returns {*}\n */\nfunction _parseJson(json, name, inters, first = true, ind = indent) {\n  let keys = [];\n  try {\n    keys = Reflect.ownKeys(json);\n  } catch (e) {\n    console.log(e);\n  }\n  if (!keys.length) { // 判断是否有key\n    inters += `${_getRenderInterface(name)} ${__getRenderInterfaceName(name)} ${_getRenderLeft()}`\n    inters += _getRenderRight();\n    return inters;\n  }\n  if (!inters && first) {\n    inters += `${_getRenderInterface(name)} ${__getRenderInterfaceName(name)} ${_getRenderLeft()}`\n  } else if (!inters && !first) {\n    inters += _getRenderLeft();\n  }\n  let type;\n  for (const key of keys) {\n    // 判断值类型\n    type = typeof json[key];\n    if (normalTypes.includes(type) || json[key] === null) {\n      inters += `${ind}${_getRenderKey(key)}:${_getRenderValue(json[key] === null ? 'null' : type)}`;\n    } else if (_isArray(json[key])) {\n      inters = _handleArray(json, key, inters, ind);\n    } else if (_isObject(json[key])) {\n      // inters += `${ind}${_getRenderKey(key)}: ${_parseJson(json[key], key, '', false, ind + ind)}`;\n      const interfaceName = _getInterfaceName(key)\n      inters += `${indent}${_getRenderKey(key)}: ${interfaceName};<br/>`;\n      objs.push({\n        key: interfaceName,\n        value: json[key]\n      });\n    }\n  }\n  if (first) {\n    inters += _getRenderRight();\n  } else {\n    inters += indent + _getRenderRight();\n  }\n  return inters;\n}\n\n/**\n * 导出接口定义\n * @param res json字符串\n * @param exportMode 1 不导出 2 导出 3 导出为默认\n * @returns {*}\n */\nexport default function interfaceDefinition(res, exportMode = Config.NOT_EXPORT, interfaceNamePrefix = '') {\n  globalExportMode = exportMode;\n  globalInterfaceNamePrefix = interfaceNamePrefix;\n  let result;\n  objs = [];\n  interfaceNames = [];\n  try {\n    const  json = eval(`(${res})`);\n    if (_isObject(json)) {\n      result = _parseJson(json, _getInterfaceName(interfaceName), '', true);\n      for (const obj of objs) {\n        result += '<br/>'\n        result += _parseJson(obj.value, obj.key, '', true);\n      }\n    } else {\n      result = '当前仅支持对象类型';\n    }\n  } catch (e) {\n    result = e.message;\n  }\n  return result;\n}\n\n","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_json_for_fold.js",["47"],"import uuid from \"../util/util\";\nimport EncryptAndDecrypt from \"../util/encrypt_and_decrypt\";\nimport Config from '../util/config';\nimport {\n  _getRenderKey,\n  _getRenderLeftBrackets,\n  _getRenderLeftSquareBrackets,\n  _getRenderRighSquareBrackets,\n  _getRenderRightBrackets,\n  _getRenderValue, _isArray,\n  _isBaseTypeArr, _isObject,\n  _isObjectArr\n} from './format_base';\n\nconst indent_str = Config.INDENT_STR;\nconst normalTypes = Config.NORMAL_TYPES;\n\n/**\n * 格式化数组\n * @param arr 数组\n * @param currentStr 已经拼接的字符串\n * @param indent 缩进\n * @returns {string|*}\n * @private\n */\nconst _formatArr = (arr, currentStr, indent) => {\n  if (!arr.length) {\n    return currentStr += _getRenderLeftSquareBrackets() + _getRenderRighSquareBrackets();\n  }\n  currentStr += `${_getRenderLeftSquareBrackets()}`;\n  // 判断数组是否为基本类型数组\n  if (_isBaseTypeArr(arr)) {\n    for (let i = 0; i < arr.length; i++) {\n      currentStr += `<br/>${indent + indent_str}` + _getRenderValue(arr[i]) + `${i !== arr.length - 1 ? ',' : ''}`;\n    }\n  } else if (_isObjectArr(arr)) {// 判断是否都为对象的数组\n    // debugger\n    for (let i = 0; i < arr.length; i++) {\n      const target = _getData(arr[i], indent);\n      currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}<span class=\"object iconfont\" data-fold=\"${Config.FOLD_STATUS}\" data-id=\"${target.id}\" data-indent=\"${target.encryptIndent}\"></span><span id=\"${target.id}\">${_getRenderLeftBrackets()}...${_getRenderRightBrackets()}</span>`;\n    }\n  } else {\n    // 大杂烩\n    for (let i = 0; i < arr.length; i++) {\n      currentStr += `<br/>${indent + indent_str}`;\n      if (normalTypes.includes(typeof arr[i])) {\n\n        currentStr += _getRenderValue(arr[i]);\n\n      } else if (_isArray(arr[i])) { // 还是个数组\n        if (arr[i].length === 0) { // 空数组\n          currentStr += _getRenderLeftSquareBrackets() + _getRenderRighSquareBrackets();\n        } else {\n          const target = _getData(arr[i], indent);\n          currentStr += `<span class=\"array iconfont\" data-fold=\"${Config.FOLD_STATUS}\" data-id=\"${target.id}\"></span><span id=\"${target.id}\">${_getRenderLeftSquareBrackets()}...${_getRenderRighSquareBrackets()}</span>`;\n        }\n      } else {\n        const target = _getData(arr[i], indent);\n        currentStr += `<span class=\"object iconfont\" data-fold=\"${Config.FOLD_STATUS}\" data-id=\"${target.id}\"></span><span id=\"${target.id}\">${_getRenderLeftBrackets()}...${_getRenderRightBrackets()}</span>`;\n      }\n      currentStr += `${i !== arr.length - 1 ? ',' : ''}`\n    }\n  }\n  currentStr += `<br/>${indent}${_getRenderRighSquareBrackets()}`;\n  return currentStr;\n}\n/**\n * 获取数据\n * @param oldData 原始value\n * @param currentIndent 当前缩进\n * @returns {{encryptIndent, id: string, value: any}}\n * @private\n */\nconst _getData = (oldData, currentIndent) => {\n  const id = uuid();\n  let value = JSON.stringify(oldData);\n  value = EncryptAndDecrypt.encryptByDESModeEBC(value)\n  sessionStorage.setItem(id, value);\n\n  const indentKey = EncryptAndDecrypt.encryptByDESModeEBC(id + 'indent');\n  const encryptIndent = EncryptAndDecrypt.encryptByDESModeEBC(indent_str + currentIndent);\n  sessionStorage.setItem(indentKey, encryptIndent);\n  return {\n    id\n  }\n}\n/**\n * 格式化json\n * @param jsonObj js对象\n * @param currentStr 已经拼接好的字符串\n * @param indent  当前缩进\n * @returns {string}\n * @private\n */\nconst _format = (jsonObj, currentStr, indent) => {\n  let keys = [];\n  try {\n    keys = Reflect.ownKeys(jsonObj);\n  } catch (e) {\n    // jsonObj === null\n    return currentStr += jsonObj;\n  }\n  if (!keys.length) {\n    return currentStr += _getRenderLeftBrackets() + _getRenderRightBrackets();\n  }\n  currentStr += `${_getRenderLeftBrackets()}`;\n  for (let i = 0; i < keys.length; i++) {\n    // 普通类型\n    if (normalTypes.includes(typeof jsonObj[keys[i]])) {\n      currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}${_getRenderKey(keys[i])}: `;\n      currentStr += `${_getRenderValue(jsonObj[keys[i]])}`\n    } else if (_isArray(jsonObj[keys[i]])) { // 数组\n      if (jsonObj[keys[i]].length === 0) { // 空数组\n        currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}${_getRenderKey(keys[i])}: `;\n        currentStr += _getRenderLeftSquareBrackets() + _getRenderRighSquareBrackets();\n      } else {\n        currentStr = _getObjStr(keys[i], jsonObj[keys[i]], currentStr, indent, 'array', i);\n      }\n    } else {\n      currentStr = _getObjStr(keys[i], jsonObj[keys[i]], currentStr, indent, 'object', i);\n    }\n  }\n  currentStr += `<br/>${indent}${_getRenderRightBrackets()}`;\n  return currentStr;\n}\n/**\n * 对象中处理对象和数组\n * @param key 当前的key\n * @param value 对应的value\n * @param currentStr 当前拼接的字符串\n * @param indent 缩进\n * @param type object | array\n * @param i 索引\n * @returns {string} 结果字符串\n * @private\n */\nconst _getObjStr = (key, value, currentStr, indent, type, i) => {\n\n  const target = _getData(value, indent);\n  // 值为null时直接显示\n  if (value === null) {\n    currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}${_getRenderKey(key)}: `;\n    currentStr += _getRenderValue(value);\n  } else { // 判断是数组还是对象\n    currentStr += `${i === 0 ? '' : ','}<br/>${indent_str}${indent}<span class=\"${type} iconfont\" data-fold=\"${Config.FOLD_STATUS}\" data-id=\"${target.id}\"></span>${_getRenderKey(key)}: `;\n    if (type === 'object') {\n      currentStr += `<span id=\"${target.id}\">${_getRenderLeftBrackets()}...${_getRenderRightBrackets()}</span>`;\n    } else {\n      currentStr += `<span id=\"${target.id}\">${_getRenderLeftSquareBrackets()}...${_getRenderRighSquareBrackets()}</span>`;\n    }\n  }\n  return currentStr;\n}\n/**\n * 格式化json\n * @param jsonStr\n * @param fold\n * @param indent\n * @param isObj\n * @returns {string|*}\n */\nconst formatJSON = (jsonStr, fold = Config.FOLD_STATUS, indent = '', isObj = true) => {\n  let result = '';\n  try {\n    if (indent) { // 有缩进 当前fold传入0 ，则需要展开\n      const value = EncryptAndDecrypt.decryptByDESModeEBC(jsonStr);\n      if (fold === Config.OPEN_STATUS) {\n        return isObj ? `${_getRenderLeftBrackets()}...${_getRenderRightBrackets()}` : `${_getRenderLeftSquareBrackets()}...${_getRenderRighSquareBrackets()}`;\n      }\n      const obj = JSON.parse(value);\n      return isObj ? _format(obj, '', EncryptAndDecrypt.decryptByDESModeEBC(indent)) : _formatArr(obj, '', EncryptAndDecrypt.decryptByDESModeEBC(indent));\n    }\n    // 第一级\n    const json =  eval(`(${jsonStr})`);\n    if (_isObject(json)) {\n      result = _format(json, result, '');\n    } else {\n      result = _formatArr(json, result, '');\n    }\n  } catch (e) {\n    console.log(e);\n    result = e.message;\n  }\n  return result;\n}\nexport default formatJSON;\n","/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/encrypt_and_decrypt.js",[],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/libs/format_base.js",[],"/Users/snail/Desktop/code/other-2020/react/hello_json_for_github/src/util/util.js",[],{"ruleId":"48","severity":1,"message":"49","line":288,"column":45,"nodeType":"50","messageId":"51","endLine":288,"endColumn":46,"fix":"52"},{"ruleId":"48","severity":1,"message":"49","line":289,"column":91,"nodeType":"50","messageId":"51","endLine":289,"endColumn":92,"fix":"53"},{"ruleId":"48","severity":1,"message":"49","line":290,"column":93,"nodeType":"50","messageId":"51","endLine":290,"endColumn":94,"fix":"54"},{"ruleId":"55","severity":1,"message":"56","line":115,"column":19,"nodeType":"57","messageId":"58","endLine":115,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":214,"column":19,"nodeType":"57","messageId":"58","endLine":214,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":174,"column":19,"nodeType":"57","messageId":"58","endLine":174,"endColumn":23},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"59","text":"60"},{"range":"61","text":"60"},{"range":"62","text":"60"},"no-eval","eval can be harmful.","CallExpression","unexpected",[9203,9267],"\n                                                              .",[9295,9359],[9389,9453]]